(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     89202,       1813]
NotebookOptionsPosition[     81966,       1697]
NotebookOutlinePosition[     82305,       1712]
CellTagsIndexPosition[     82262,       1709]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
UR: Encoding Structured Binary Data for Transport in QR Codes and URIs\
\>", "Title",
 CellChangeTimes->{{3.797349468561578*^9, 3.797349482308257*^9}, {
   3.797362133141533*^9, 3.7973621373693666`*^9}, 3.79764407720494*^9, 
   3.797645496902351*^9, {3.797656279222966*^9, 
   3.797656284656089*^9}},ExpressionUUID->"8def03a4-c0bd-4f0c-a124-\
804dfa724276"],

Cell["\<\
Wolf McNally
\[Copyright] 2020 Blockchain Commons\
\>", "Subtitle",
 CellChangeTimes->{{3.7973494839393*^9, 
  3.7973494935245647`*^9}},ExpressionUUID->"a054532b-4605-46ab-af96-\
854ffae67237"],

Cell[CellGroupData[{

Cell["Utilities", "Section",
 CellChangeTimes->{{3.797643866858158*^9, 
  3.797643867961063*^9}},ExpressionUUID->"8f632d34-678b-48c8-8b78-\
f33a2eeda3df"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BytesFromUTF8String", "[", "string_String", "]"}], ":=", 
   RowBox[{"ByteArray", "[", 
    RowBox[{"ToCharacterCode", "[", 
     RowBox[{"string", ",", "\"\<UTF8\>\""}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ToHex", "[", "bytes_ByteArray", "]"}], ":=", 
   RowBox[{"StringJoin", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"IntegerString", "[", 
        RowBox[{"#", ",", "16", ",", "2"}], "]"}], "&"}], ",", 
      RowBox[{"Normal", "[", "bytes", "]"}]}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"FromHex", "[", "hex_", "]"}], ":=", 
   RowBox[{"ByteArray", "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{
      RowBox[{"FromDigits", "[", 
       RowBox[{"hex", ",", "16"}], "]"}], ",", "256"}], "]"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797638436143811*^9, 3.797638436346981*^9}, 
   3.797644244359034*^9, {3.800650249117256*^9, 3.8006502497453423`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"7e39bc12-5f81-4a45-b7c4-9926f8b57ccc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Define the Bytewords Encoding", "Section",
 CellChangeTimes->{{3.7974532289858522`*^9, 3.7974532386595163`*^9}, {
  3.801954127287878*^9, 
  3.801954129989524*^9}},ExpressionUUID->"5a31f986-03ba-4f24-876c-\
49a8a24373ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "WordToMinimal", ",", "indexesToWords", ",", "indexesToMinimalWords", 
      ",", "wordsToIndexes", ",", "minimalWordsToIndexes", ",", "Validate", 
      ",", "EncodeWord", ",", "EncodeMinimalWord", ",", "DecodeWord", ",", 
      "DecodeMinimalWord", ",", "ComposeMessage", ",", 
      "BytewordsEncodeWithSeparator", ",", "BytewordsEncodeStandard", ",", 
      "BytewordsEncodeURI", ",", "BytewordsDecodeWithSeparator", ",", 
      "BytewordsDecodeStandard", ",", "BytewordsDecodeURI"}], "}"}], ",", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"byteWords", "=", 
      RowBox[{"{", 
       RowBox[{
       "\"\<able\>\"", ",", "\"\<acid\>\"", ",", "\"\<also\>\"", ",", 
        "\"\<apex\>\"", ",", "\"\<aqua\>\"", ",", "\"\<arch\>\"", ",", 
        "\"\<atom\>\"", ",", "\"\<aunt\>\"", ",", "\"\<away\>\"", ",", 
        "\"\<axis\>\"", ",", "\"\<back\>\"", ",", "\"\<bald\>\"", ",", 
        "\"\<barn\>\"", ",", "\"\<belt\>\"", ",", "\"\<beta\>\"", ",", 
        "\"\<bias\>\"", ",", "\"\<blue\>\"", ",", "\"\<body\>\"", ",", 
        "\"\<brag\>\"", ",", "\"\<brew\>\"", ",", "\"\<bulb\>\"", ",", 
        "\"\<buzz\>\"", ",", "\"\<calm\>\"", ",", "\"\<cash\>\"", ",", 
        "\"\<cats\>\"", ",", "\"\<chef\>\"", ",", "\"\<city\>\"", ",", 
        "\"\<claw\>\"", ",", "\"\<code\>\"", ",", "\"\<cola\>\"", ",", 
        "\"\<cook\>\"", ",", "\"\<cost\>\"", ",", "\"\<crux\>\"", ",", 
        "\"\<curl\>\"", ",", "\"\<cusp\>\"", ",", "\"\<cyan\>\"", ",", 
        "\"\<dark\>\"", ",", "\"\<data\>\"", ",", "\"\<days\>\"", ",", 
        "\"\<deli\>\"", ",", "\"\<dice\>\"", ",", "\"\<diet\>\"", ",", 
        "\"\<door\>\"", ",", "\"\<down\>\"", ",", "\"\<draw\>\"", ",", 
        "\"\<drop\>\"", ",", "\"\<drum\>\"", ",", "\"\<dull\>\"", ",", 
        "\"\<duty\>\"", ",", "\"\<each\>\"", ",", "\"\<easy\>\"", ",", 
        "\"\<echo\>\"", ",", "\"\<edge\>\"", ",", "\"\<epic\>\"", ",", 
        "\"\<even\>\"", ",", "\"\<exam\>\"", ",", "\"\<exit\>\"", ",", 
        "\"\<eyes\>\"", ",", "\"\<fact\>\"", ",", "\"\<fair\>\"", ",", 
        "\"\<fern\>\"", ",", "\"\<figs\>\"", ",", "\"\<film\>\"", ",", 
        "\"\<fish\>\"", ",", "\"\<fizz\>\"", ",", "\"\<flap\>\"", ",", 
        "\"\<flew\>\"", ",", "\"\<flux\>\"", ",", "\"\<foxy\>\"", ",", 
        "\"\<free\>\"", ",", "\"\<frog\>\"", ",", "\"\<fuel\>\"", ",", 
        "\"\<fund\>\"", ",", "\"\<gala\>\"", ",", "\"\<game\>\"", ",", 
        "\"\<gear\>\"", ",", "\"\<gems\>\"", ",", "\"\<gift\>\"", ",", 
        "\"\<girl\>\"", ",", "\"\<glow\>\"", ",", "\"\<good\>\"", ",", 
        "\"\<gray\>\"", ",", "\"\<grim\>\"", ",", "\"\<guru\>\"", ",", 
        "\"\<gush\>\"", ",", "\"\<gyro\>\"", ",", "\"\<half\>\"", ",", 
        "\"\<hang\>\"", ",", "\"\<hard\>\"", ",", "\"\<hawk\>\"", ",", 
        "\"\<heat\>\"", ",", "\"\<help\>\"", ",", "\"\<high\>\"", ",", 
        "\"\<hill\>\"", ",", "\"\<holy\>\"", ",", "\"\<hope\>\"", ",", 
        "\"\<horn\>\"", ",", "\"\<huts\>\"", ",", "\"\<iced\>\"", ",", 
        "\"\<idea\>\"", ",", "\"\<idle\>\"", ",", "\"\<inch\>\"", ",", 
        "\"\<inky\>\"", ",", "\"\<into\>\"", ",", "\"\<iris\>\"", ",", 
        "\"\<iron\>\"", ",", "\"\<item\>\"", ",", "\"\<jade\>\"", ",", 
        "\"\<jazz\>\"", ",", "\"\<join\>\"", ",", "\"\<jolt\>\"", ",", 
        "\"\<jowl\>\"", ",", "\"\<judo\>\"", ",", "\"\<jugs\>\"", ",", 
        "\"\<jump\>\"", ",", "\"\<junk\>\"", ",", "\"\<jury\>\"", ",", 
        "\"\<keep\>\"", ",", "\"\<keno\>\"", ",", "\"\<kept\>\"", ",", 
        "\"\<keys\>\"", ",", "\"\<kick\>\"", ",", "\"\<kiln\>\"", ",", 
        "\"\<king\>\"", ",", "\"\<kite\>\"", ",", "\"\<kiwi\>\"", ",", 
        "\"\<knob\>\"", ",", "\"\<lamb\>\"", ",", "\"\<lava\>\"", ",", 
        "\"\<lazy\>\"", ",", "\"\<leaf\>\"", ",", "\"\<legs\>\"", ",", 
        "\"\<liar\>\"", ",", "\"\<list\>\"", ",", "\"\<limp\>\"", ",", 
        "\"\<lion\>\"", ",", "\"\<logo\>\"", ",", "\"\<loud\>\"", ",", 
        "\"\<love\>\"", ",", "\"\<luau\>\"", ",", "\"\<luck\>\"", ",", 
        "\"\<lung\>\"", ",", "\"\<main\>\"", ",", "\"\<many\>\"", ",", 
        "\"\<math\>\"", ",", "\"\<maze\>\"", ",", "\"\<memo\>\"", ",", 
        "\"\<menu\>\"", ",", "\"\<meow\>\"", ",", "\"\<mild\>\"", ",", 
        "\"\<mint\>\"", ",", "\"\<miss\>\"", ",", "\"\<monk\>\"", ",", 
        "\"\<nail\>\"", ",", "\"\<navy\>\"", ",", "\"\<need\>\"", ",", 
        "\"\<news\>\"", ",", "\"\<next\>\"", ",", "\"\<noon\>\"", ",", 
        "\"\<note\>\"", ",", "\"\<numb\>\"", ",", "\"\<obey\>\"", ",", 
        "\"\<oboe\>\"", ",", "\"\<omit\>\"", ",", "\"\<onyx\>\"", ",", 
        "\"\<open\>\"", ",", "\"\<oval\>\"", ",", "\"\<owls\>\"", ",", 
        "\"\<paid\>\"", ",", "\"\<part\>\"", ",", "\"\<peck\>\"", ",", 
        "\"\<play\>\"", ",", "\"\<plus\>\"", ",", "\"\<poem\>\"", ",", 
        "\"\<pool\>\"", ",", "\"\<pose\>\"", ",", "\"\<puff\>\"", ",", 
        "\"\<puma\>\"", ",", "\"\<purr\>\"", ",", "\"\<quad\>\"", ",", 
        "\"\<quiz\>\"", ",", "\"\<race\>\"", ",", "\"\<ramp\>\"", ",", 
        "\"\<real\>\"", ",", "\"\<redo\>\"", ",", "\"\<rich\>\"", ",", 
        "\"\<road\>\"", ",", "\"\<rock\>\"", ",", "\"\<roof\>\"", ",", 
        "\"\<ruby\>\"", ",", "\"\<ruin\>\"", ",", "\"\<runs\>\"", ",", 
        "\"\<rust\>\"", ",", "\"\<safe\>\"", ",", "\"\<saga\>\"", ",", 
        "\"\<scar\>\"", ",", "\"\<sets\>\"", ",", "\"\<silk\>\"", ",", 
        "\"\<skew\>\"", ",", "\"\<slot\>\"", ",", "\"\<soap\>\"", ",", 
        "\"\<solo\>\"", ",", "\"\<song\>\"", ",", "\"\<stub\>\"", ",", 
        "\"\<surf\>\"", ",", "\"\<swan\>\"", ",", "\"\<taco\>\"", ",", 
        "\"\<task\>\"", ",", "\"\<taxi\>\"", ",", "\"\<tent\>\"", ",", 
        "\"\<tied\>\"", ",", "\"\<time\>\"", ",", "\"\<tiny\>\"", ",", 
        "\"\<toil\>\"", ",", "\"\<tomb\>\"", ",", "\"\<toys\>\"", ",", 
        "\"\<trip\>\"", ",", "\"\<tuna\>\"", ",", "\"\<twin\>\"", ",", 
        "\"\<ugly\>\"", ",", "\"\<undo\>\"", ",", "\"\<unit\>\"", ",", 
        "\"\<urge\>\"", ",", "\"\<user\>\"", ",", "\"\<vast\>\"", ",", 
        "\"\<very\>\"", ",", "\"\<veto\>\"", ",", "\"\<vial\>\"", ",", 
        "\"\<vibe\>\"", ",", "\"\<view\>\"", ",", "\"\<visa\>\"", ",", 
        "\"\<void\>\"", ",", "\"\<vows\>\"", ",", "\"\<wall\>\"", ",", 
        "\"\<wand\>\"", ",", "\"\<warm\>\"", ",", "\"\<wasp\>\"", ",", 
        "\"\<wave\>\"", ",", "\"\<waxy\>\"", ",", "\"\<webs\>\"", ",", 
        "\"\<what\>\"", ",", "\"\<when\>\"", ",", "\"\<whiz\>\"", ",", 
        "\"\<wolf\>\"", ",", "\"\<work\>\"", ",", "\"\<yank\>\"", ",", 
        "\"\<yawn\>\"", ",", "\"\<yell\>\"", ",", "\"\<yoga\>\"", ",", 
        "\"\<yurt\>\"", ",", "\"\<zaps\>\"", ",", "\"\<zest\>\"", ",", 
        "\"\<zinc\>\"", ",", "\"\<zone\>\"", ",", "\"\<zoom\>\"", ",", 
        "\"\<zero\>\""}], "}"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"WordToMinimal", "[", "word_", "]"}], ":=", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"StringPart", "[", 
        RowBox[{"word", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "4"}], "}"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"indexesToWords", "=", 
      RowBox[{"Association", "[", 
       RowBox[{"MapIndexed", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"First", "[", "#2", "]"}], "-", "1"}], "\[Rule]", "#1"}], 
          "&"}], ",", "byteWords"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"indexesToMinimalWords", "=", 
      RowBox[{"Association", "[", 
       RowBox[{"MapIndexed", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"First", "[", "#2", "]"}], "-", "1"}], "\[Rule]", 
           RowBox[{"WordToMinimal", "[", "#1", "]"}]}], "&"}], ",", 
         "byteWords"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"wordsToIndexes", "=", 
      RowBox[{"Association", "[", 
       RowBox[{"MapIndexed", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#1", "\[Rule]", 
           RowBox[{
            RowBox[{"First", "[", "#2", "]"}], "-", "1"}]}], "&"}], ",", 
         "byteWords"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"minimalWordsToIndexes", "=", 
      RowBox[{"Association", "[", 
       RowBox[{"MapIndexed", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"WordToMinimal", "[", "#1", "]"}], "\[Rule]", 
           RowBox[{
            RowBox[{"First", "[", "#2", "]"}], "-", "1"}]}], "&"}], ",", 
         "byteWords"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"BytewordsHash", "[", "bytes_ByteArray", "]"}], ":=", 
      RowBox[{"ByteArray", "[", 
       RowBox[{"IntegerDigits", "[", 
        RowBox[{
         RowBox[{"Hash", "[", 
          RowBox[{"bytes", ",", "\"\<CRC32\>\""}], "]"}], ",", "256"}], "]"}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Validate", "[", "a_", "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"messageChecksum", ",", "message", ",", "checksum"}], "}"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "a", "]"}], "<", "5"}], ",", 
           RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"DeleteDuplicates", "[", 
             RowBox[{"Map", "[", 
              RowBox[{"Head", ",", "a"}], "]"}], "]"}], "=!=", 
            RowBox[{"{", "Integer", "}"}]}], ",", 
           RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"messageChecksum", "=", 
          RowBox[{"ByteArray", "[", 
           RowBox[{"Take", "[", 
            RowBox[{"a", ",", 
             RowBox[{"-", "4"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"message", "=", 
          RowBox[{"ByteArray", "[", 
           RowBox[{"Drop", "[", 
            RowBox[{"a", ",", 
             RowBox[{"-", "4"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"checksum", "=", 
          RowBox[{"BytewordsHash", "[", "message", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"messageChecksum", "!=", "checksum"}], ",", 
           RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "message"}]}], "\[IndentingNewLine]", "]"}]}],
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"EncodeWord", "[", "byte_", "]"}], ":=", 
      RowBox[{"indexesToWords", "[", "byte", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"EncodeMinimalWord", "[", "byte_", "]"}], ":=", 
      RowBox[{"indexesToMinimalWords", "[", "byte", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DecodeWord", "[", "word_String", "]"}], ":=", 
      RowBox[{"wordsToIndexes", "[", "word", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DecodeMinimalWord", "[", "word_String", "]"}], ":=", 
      RowBox[{"minimalWordsToIndexes", "[", "word", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ComposeMessage", "[", "bytes_ByteArray", "]"}], ":=", 
      RowBox[{"Normal", "[", 
       RowBox[{"Join", "[", 
        RowBox[{"bytes", ",", 
         RowBox[{"BytewordsHash", "[", "bytes", "]"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"BytewordsEncodeWithSeparator", "[", 
       RowBox[{"bytes_ByteArray", ",", "separator_"}], "]"}], ":=", 
      RowBox[{"StringRiffle", "[", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"EncodeWord", "[", "#", "]"}], "&"}], ",", 
          RowBox[{"ComposeMessage", "[", "bytes", "]"}]}], "]"}], ",", 
        "separator"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"BytewordsEncodeStandard", "[", "bytes_ByteArray", "]"}], ":=", 
      
      RowBox[{"BytewordsEncodeWithSeparator", "[", 
       RowBox[{"bytes", ",", "\"\< \>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"BytewordsEncodeURI", "[", "bytes_ByteArray", "]"}], ":=", 
      RowBox[{"BytewordsEncodeWithSeparator", "[", 
       RowBox[{"bytes", ",", "\"\<-\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"BytewordsEncodeMinimal", "[", "bytes_ByteArray", "]"}], ":=", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"EncodeMinimalWord", "[", "#", "]"}], "&"}], ",", 
         RowBox[{"ComposeMessage", "[", "bytes", "]"}]}], "]"}], "]"}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"BytewordsDecodeWithSeparator", "[", 
       RowBox[{"string_", ",", "separator_"}], "]"}], ":=", 
      RowBox[{"Validate", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"DecodeWord", ",", 
         RowBox[{"StringSplit", "[", 
          RowBox[{"string", ",", "separator"}], "]"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"BytewordsDecodeStandard", "[", "string_", "]"}], ":=", 
      RowBox[{"BytewordsDecodeWithSeparator", "[", 
       RowBox[{"string", ",", "\"\< \>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"BytewordsDecodeURI", "[", "string_", "]"}], ":=", 
      RowBox[{"BytewordsDecodeWithSeparator", "[", 
       RowBox[{"string", ",", "\"\<-\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"BytewordsDecodeMinimal", "[", "string_", "]"}], ":=", 
      RowBox[{"Validate", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"DecodeMinimalWord", ",", 
         RowBox[{"StringPartition", "[", 
          RowBox[{"string", ",", "2"}], "]"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Bytewords", "::", "nostyle"}], "=", 
      "\"\<Invalid style: `1`.\>\""}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"BytewordsEncode", "[", 
       RowBox[{"bytes_ByteArray", ",", 
        RowBox[{"style_String:", "\"\<Standard\>\""}]}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{"style", ",", "\[IndentingNewLine]", "\"\<Standard\>\"", ",", 
          RowBox[{"BytewordsEncodeStandard", "[", "bytes", "]"}], ",", 
          "\[IndentingNewLine]", "\"\<URI\>\"", ",", 
          RowBox[{"BytewordsEncodeURI", "[", "bytes", "]"}], ",", 
          "\[IndentingNewLine]", "\"\<Minimal\>\"", ",", 
          RowBox[{"BytewordsEncodeMinimal", "[", "bytes", "]"}], ",", 
          "\[IndentingNewLine]", "_", ",", 
          RowBox[{
           RowBox[{"Message", "[", 
            RowBox[{
             RowBox[{"Bytewords", "::", "nostyle"}], ",", "style"}], "]"}], 
           ";", 
           RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Bytewords", "::", "invalid"}], "=", 
      "\"\<Invalid format.\>\""}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"BytewordsDecode", "[", "string_String", "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "b", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"b", "=", 
          RowBox[{"BytewordsDecodeMinimal", "[", 
           RowBox[{"ToLowerCase", "[", "string", "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"b", "=!=", "False"}], ",", 
           RowBox[{"Return", "[", "b", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"b", "=", 
          RowBox[{"BytewordsDecodeStandard", "[", "string", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"b", "=!=", "False"}], ",", 
           RowBox[{"Return", "[", "b", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"b", "=", 
          RowBox[{"BytewordsDecodeURI", "[", "string", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"b", "=!=", "False"}], ",", 
           RowBox[{"Return", "[", "b", "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Message", "[", 
          RowBox[{"Bytewords", "::", "invalid"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}],
      ";"}]}], "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.801787110483025*^9, {3.801787148609768*^9, 3.8017872633378973`*^9}, {
   3.8017873378282557`*^9, 3.801787367772848*^9}, {3.801787965887744*^9, 
   3.8017879775302877`*^9}, {3.801788052794396*^9, 3.801788065898479*^9}, {
   3.80178809815545*^9, 3.801788150667791*^9}, {3.8017881937570543`*^9, 
   3.801788199831011*^9}, 3.801788291861109*^9, {3.8017884823123283`*^9, 
   3.801788535241839*^9}, {3.8017885906274843`*^9, 3.80178860375525*^9}, {
   3.801788680066875*^9, 3.801788682697464*^9}, {3.8017887376888247`*^9, 
   3.801788762078319*^9}, {3.8017889901548233`*^9, 3.801789153329925*^9}, {
   3.80178920748586*^9, 3.801789210632737*^9}, {3.801796833465798*^9, 
   3.801796924252095*^9}, {3.801797147580591*^9, 3.801797192850501*^9}, {
   3.8017973682998657`*^9, 3.801797473261935*^9}, {3.801797830910149*^9, 
   3.80179786681712*^9}, {3.801797901200365*^9, 3.8017979067551317`*^9}, {
   3.801797953603471*^9, 3.8017979939889803`*^9}, {3.801798129972026*^9, 
   3.8017982026227827`*^9}, {3.801831862622212*^9, 3.801831878959837*^9}, {
   3.801831957545692*^9, 3.801831991472801*^9}, {3.801832764875268*^9, 
   3.801832780849872*^9}, {3.801946572085669*^9, 3.80194659946634*^9}, {
   3.8019466304954453`*^9, 3.801946855181926*^9}, {3.801946915911625*^9, 
   3.801946919039371*^9}, {3.801946969698435*^9, 3.8019470397066193`*^9}, {
   3.801947120475739*^9, 3.801947185883848*^9}, {3.8019472681113462`*^9, 
   3.801947270135519*^9}, {3.801947346445953*^9, 3.8019474277008142`*^9}, {
   3.8019477839366007`*^9, 3.801948017562005*^9}, {3.8019480505242157`*^9, 
   3.8019480706822453`*^9}, {3.8019481104300947`*^9, 
   3.8019481484657784`*^9}, {3.801948203043188*^9, 3.8019483016585207`*^9}, {
   3.801948339067761*^9, 3.801948383988459*^9}, {3.8019484581043873`*^9, 
   3.80194863400008*^9}, {3.801948687675026*^9, 3.801948807340241*^9}, {
   3.8019488431516647`*^9, 3.801949056536358*^9}, 3.80194913312683*^9, {
   3.80194917070194*^9, 3.801949243704608*^9}, {3.801949289077208*^9, 
   3.801949297704423*^9}, {3.801949342721273*^9, 3.8019495327425957`*^9}, {
   3.801949846937352*^9, 3.801949930366559*^9}, {3.8019499807133827`*^9, 
   3.8019499808018093`*^9}, {3.801950045548163*^9, 3.801950096060287*^9}, {
   3.801950136224484*^9, 3.8019501403843946`*^9}, {3.801950185160527*^9, 
   3.80195024308715*^9}, {3.8019502735067797`*^9, 3.801950604767631*^9}, {
   3.801950650368696*^9, 3.80195067456419*^9}, {3.8019507259007597`*^9, 
   3.801950756088564*^9}, {3.801950996862576*^9, 3.801951007086788*^9}, {
   3.801951041142605*^9, 3.801951071537355*^9}, {3.801951119813383*^9, 
   3.8019511216004333`*^9}, {3.80195119619197*^9, 3.801951207112974*^9}, {
   3.801951323508439*^9, 3.8019515186140213`*^9}, {3.801951551566359*^9, 
   3.801951611425928*^9}, {3.8019516522880573`*^9, 3.801951784228135*^9}, 
   3.8019518948772793`*^9, {3.8019522358154783`*^9, 3.801952235945858*^9}, {
   3.8019537920019283`*^9, 3.8019538598834753`*^9}, {3.8019629873120193`*^9, 
   3.8019629976603527`*^9}, {3.80196523808036*^9, 3.801965242700789*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"8d60b1f2-b05b-41e5-9185-2917400d9a87"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Define the minimal CBOR implementation", "Section",
 CellChangeTimes->{{3.797624866740848*^9, 3.797624882526381*^9}, {
  3.7976250225119*^9, 
  3.7976250242092*^9}},ExpressionUUID->"a2a698a4-ecec-4d4f-8f9c-7265334a5844"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"CBOREncodeLength", ",", "CBORDecodeLength"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"CBOREncodeLength", "[", 
       RowBox[{"len_", ",", "majorType_"}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", "offset", "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"offset", "=", 
          RowBox[{"BitShiftLeft", "[", 
           RowBox[{"majorType", ",", "5"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Which", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"len", "\[LessEqual]", "23"}], ",", 
            RowBox[{"{", 
             RowBox[{"offset", "+", "len"}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"len", "\[LessEqual]", 
             RowBox[{
              SuperscriptBox["2", "8"], "-", "1"}]}], ",", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"offset", "+", "24"}], "}"}], ",", 
              RowBox[{"IntegerDigits", "[", 
               RowBox[{"len", ",", "256", ",", "1"}], "]"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"len", "\[LessEqual]", 
             RowBox[{
              SuperscriptBox["2", "16"], "-", "1"}]}], ",", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"offset", "+", "25"}], "}"}], ",", 
              RowBox[{"IntegerDigits", "[", 
               RowBox[{"len", ",", "256", ",", "2"}], "]"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"len", "\[LessEqual]", 
             RowBox[{
              SuperscriptBox["2", "32"], "-", "1"}]}], ",", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"offset", "+", "26"}], "}"}], ",", 
              RowBox[{"IntegerDigits", "[", 
               RowBox[{"len", ",", "256", ",", "4"}], "]"}]}], "]"}], ",", 
            "\[IndentingNewLine]", "_", ",", 
            RowBox[{"Abort", "[", "]"}]}], "\[IndentingNewLine]", "]"}], "//",
           "ByteArray"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"CBORDecodeLength", "[", 
       RowBox[{"data_ByteArray", ",", "additional_"}], "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"len", ",", "rest"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"len", ",", "rest"}], "}"}], "=", 
         RowBox[{"Which", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"additional", "\[LessEqual]", "23"}], ",", 
           RowBox[{"{", 
            RowBox[{"additional", ",", "data"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"additional", "\[Equal]", "24"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"FromDigits", "[", 
              RowBox[{
               RowBox[{"Normal", "[", 
                RowBox[{"Take", "[", 
                 RowBox[{"data", ",", "1"}], "]"}], "]"}], ",", "256"}], 
              "]"}], ",", 
             RowBox[{"Drop", "[", 
              RowBox[{"data", ",", "1"}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"additional", "\[Equal]", "25"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"FromDigits", "[", 
              RowBox[{
               RowBox[{"Normal", "[", 
                RowBox[{"Take", "[", 
                 RowBox[{"data", ",", "2"}], "]"}], "]"}], ",", "256"}], 
              "]"}], ",", 
             RowBox[{"Drop", "[", 
              RowBox[{"data", ",", "2"}], "]"}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"additional", "\[Equal]", "26"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"FromDigits", "[", 
              RowBox[{
               RowBox[{"Normal", "[", 
                RowBox[{"Take", "[", 
                 RowBox[{"data", ",", "4"}], "]"}], "]"}], ",", "256"}], 
              "]"}], ",", 
             RowBox[{"Drop", "[", 
              RowBox[{"data", ",", "4"}], "]"}]}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"CBOREncodeBytes", "[", "bytes_ByteArray", "]"}], ":=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"CBOREncodeLength", "[", 
         RowBox[{
          RowBox[{"Length", "[", "bytes", "]"}], ",", "2"}], "]"}], ",", 
        "bytes"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"CBORDecodeBytes", "[", "bytes_ByteArray", "]"}], ":=", 
      RowBox[{"Module", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "typeInfo", ",", "rest", ",", "majorType", ",", "additional", ",", 
          "len"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "bytes", "]"}], "<", "2"}], ",", 
           RowBox[{"Abort", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"typeInfo", ",", "rest"}], "}"}], "=", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"First", "[", "bytes", "]"}], ",", 
            RowBox[{"Rest", "[", "bytes", "]"}]}], "}"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"majorType", "=", 
          RowBox[{"BitAnd", "[", 
           RowBox[{
            RowBox[{"BitShiftRight", "[", 
             RowBox[{"typeInfo", ",", "5"}], "]"}], ",", "2^^111"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"majorType", "\[NotEqual]", "2"}], ",", 
           RowBox[{"Abort", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"additional", "=", 
          RowBox[{"BitAnd", "[", 
           RowBox[{"typeInfo", ",", "2^^11111"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"len", ",", "rest"}], "}"}], "=", 
          RowBox[{"CBORDecodeLength", "[", 
           RowBox[{"rest", ",", "additional"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"len", "\[NotEqual]", 
            RowBox[{"Length", "[", "rest", "]"}]}], ",", 
           RowBox[{"Abort", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
         "rest"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797620661987649*^9, 3.797620676844997*^9}, {
   3.797620714806185*^9, 3.7976207836432056`*^9}, {3.797620850303173*^9, 
   3.797620852721984*^9}, {3.7976209476377497`*^9, 3.797620978911353*^9}, {
   3.797621016455861*^9, 3.797621033576236*^9}, {3.797621099165251*^9, 
   3.7976211238834763`*^9}, {3.797621182080621*^9, 3.797621235740693*^9}, {
   3.797621276871771*^9, 3.7976213591837883`*^9}, {3.797621483211537*^9, 
   3.7976216501165447`*^9}, {3.797621719339595*^9, 3.797621722994679*^9}, {
   3.7976217688319273`*^9, 3.7976217853783913`*^9}, {3.7976218720188837`*^9, 
   3.797621909140772*^9}, {3.797621995858232*^9, 3.797622009749303*^9}, {
   3.7976220727085457`*^9, 3.797622084137682*^9}, {3.797622167196574*^9, 
   3.7976221812347727`*^9}, 3.797622243180794*^9, {3.797622377316518*^9, 
   3.7976225677232237`*^9}, {3.7976227637247477`*^9, 3.797622807013608*^9}, {
   3.797622867735612*^9, 3.797622927772059*^9}, {3.7976230397585087`*^9, 
   3.797623079953412*^9}, {3.797623142766279*^9, 3.797623143370672*^9}, {
   3.797623255016532*^9, 3.797623319614921*^9}, {3.797623377451396*^9, 
   3.797623383346957*^9}, {3.797623448900247*^9, 3.7976236142668047`*^9}, {
   3.797623850903874*^9, 3.797623889556986*^9}, {3.7976239930158854`*^9, 
   3.797624033333926*^9}, {3.7976241113226*^9, 3.797624140154263*^9}, 
   3.797624253491631*^9, {3.797624620965828*^9, 3.797624626721311*^9}, {
   3.797624751859572*^9, 3.797624784302456*^9}, {3.797624822197432*^9, 
   3.797624826986368*^9}, {3.7976254635882263`*^9, 3.797625490945126*^9}, {
   3.797625553542938*^9, 3.7976256432491207`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"58c4aac3-c350-4efc-936e-31d1dd311ec5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example of Bytewords Encoding", "Section",
 CellChangeTimes->{{3.797349589915986*^9, 3.797349617321329*^9}, {
   3.797358069779009*^9, 3.797358070599071*^9}, {3.7973973733999777`*^9, 
   3.7973973737816887`*^9}, {3.797397555189844*^9, 3.79739755598885*^9}, 
   3.797397685421506*^9, 3.797397736068625*^9, {3.797483367461225*^9, 
   3.797483367865591*^9}, {3.7974853770813026`*^9, 3.797485381615095*^9}, 
   3.8019654031219053`*^9},ExpressionUUID->"46f05919-ffe7-4e70-a205-\
cbd9c6378a91"],

Cell[BoxData[
 RowBox[{"payload", "=", 
  RowBox[{
  "BytesFromUTF8String", "[", "\"\<Hello, world\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.7976384606876383`*^9, 3.797638477792034*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"ccde3112-fcab-4eac-9cd8-c3f3a0c5aa8d"],

Cell[BoxData[
 RowBox[{"payload", "//", "ToHex"}]], "Input",
 CellChangeTimes->{{3.797638480640202*^9, 3.797638490607663*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"fa9ed81a-3f72-4426-8d99-c7c74875b5c7"],

Cell[BoxData[
 RowBox[{"encoded", "=", 
  RowBox[{"BytewordsEncodeMinimal", "[", "payload", "]"}]}]], "Input",
 CellChangeTimes->{{3.797350533669622*^9, 3.7973505385822573`*^9}, 
   3.797397627711946*^9, {3.797483398771957*^9, 3.797483399839053*^9}, {
   3.797484241317945*^9, 3.7974842605212107`*^9}, {3.7974849357748117`*^9, 
   3.797484939557952*^9}, {3.7974852241614*^9, 3.797485225373172*^9}, {
   3.797485335818585*^9, 3.7974853366598997`*^9}, {3.797638456789412*^9, 
   3.797638459904147*^9}, {3.797638507988371*^9, 3.797638519788273*^9}, {
   3.8019651973799257`*^9, 3.8019651994474173`*^9}, {3.801965267084984*^9, 
   3.801965268029128*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"d435af03-bf53-4a0c-954d-295a7f7aeaa3"],

Cell[BoxData[
 RowBox[{"BytewordsDecodeMinimal", "[", "encoded", "]"}]], "Input",
 CellChangeTimes->{{3.797484035079784*^9, 3.797484049534584*^9}, {
   3.7974841555695333`*^9, 3.797484212346458*^9}, {3.797484245403104*^9, 
   3.7974842642248793`*^9}, 3.797484904377367*^9, 3.7974849546318293`*^9, {
   3.79748502229237*^9, 3.797485077313191*^9}, {3.797485446352788*^9, 
   3.797485453075807*^9}, 3.797638526082008*^9, {3.8019652906983624`*^9, 
   3.80196529843758*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"0e130ac0-a461-4060-9b78-48938bb48c7d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Example of CBOR Encoding a cryptographic seed", "Section",
 CellChangeTimes->{{3.79762564974975*^9, 
  3.797625661607915*^9}},ExpressionUUID->"d3c4b16f-4de9-4a1b-933e-\
bee32352f23a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"payload", "=", 
   RowBox[{
    RowBox[{"RandomInteger", "[", 
     RowBox[{"255", ",", "32"}], "]"}], "//", "ByteArray"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"encoded", "=", 
   RowBox[{"CBOREncodeBytes", "[", "payload", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.797625674990376*^9, 3.79762570619383*^9}, {
  3.797637880548304*^9, 3.797637913979878*^9}, {3.7976380818687897`*^9, 
  3.7976380819327803`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"7e6b9b81-7524-46f2-b814-4ef98dab6fe9"],

Cell[BoxData[
 RowBox[{"payload", "//", "ToHex"}]], "Input",
 CellChangeTimes->{{3.797637917908586*^9, 3.797637940282358*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"c8d7db67-96de-4203-a57c-ed76e216687a"],

Cell[BoxData[
 RowBox[{"encoded", "//", "ToHex"}]], "Input",
 CellChangeTimes->{{3.797638018934004*^9, 3.797638020957494*^9}},
 CellLabel->"In[72]:=",ExpressionUUID->"dd570c6e-0547-4dd1-8a85-5e65d3020ca1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CBORDecodeBytes", "[", "encoded", "]"}], "\[Equal]", 
  "payload"}]], "Input",
 CellLabel->"In[73]:=",ExpressionUUID->"c49ecc6e-cd00-470b-b50e-4dc92be24d0a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Start with a payload of arbitrary bytes", "Section",
 CellChangeTimes->{{3.7973495010850277`*^9, 3.797349505888708*^9}, {
  3.79735796909363*^9, 
  3.797357981141556*^9}},ExpressionUUID->"d7c03100-4d61-47e8-98b8-\
806105237774"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomBytes", "[", "length_", "]"}], ":=", 
  RowBox[{
   RowBox[{"RandomInteger", "[", 
    RowBox[{"255", ",", "length"}], "]"}], "//", "ByteArray"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.79764233810823*^9, 3.797642350717649*^9}, 
   3.7976456665674267`*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"378f91e2-f8f5-495b-bc4e-724928544407"],

Cell[BoxData[
 RowBox[{
  RowBox[{"payload", "=", 
   RowBox[{"RandomBytes", "[", "800", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7973495079262238`*^9, 3.797349512504154*^9}, {
   3.7973495489772053`*^9, 3.797349570957159*^9}, {3.797349824056281*^9, 
   3.797349872069633*^9}, {3.7973508050457897`*^9, 3.797350805209549*^9}, {
   3.7973544279230223`*^9, 3.797354428097835*^9}, {3.797354561777645*^9, 
   3.797354562404948*^9}, {3.797358421122376*^9, 3.797358422165915*^9}, {
   3.797360710794076*^9, 3.79736071121751*^9}, {3.79736074556695*^9, 
   3.7973607679302187`*^9}, {3.79736155145568*^9, 3.797361551711796*^9}, {
   3.79736184624229*^9, 3.797361847004745*^9}, {3.7973630717514973`*^9, 
   3.79736307183724*^9}, {3.7973977726793547`*^9, 3.797397772923594*^9}, {
   3.797397804393743*^9, 3.7973978071354094`*^9}, {3.797483611378289*^9, 
   3.797483611735018*^9}, 3.797483872190344*^9, {3.797485649089561*^9, 
   3.797485674647422*^9}, 3.797485740215554*^9, 3.7974861666296797`*^9, {
   3.797642354467866*^9, 3.797642362642688*^9}, 3.7976563037733107`*^9, 
   3.802035983047193*^9},ExpressionUUID->"cf781d10-dfc1-4f25-bb86-\
3dd2ed918551"],

Cell[BoxData[
 RowBox[{
  RowBox[{"payload", "=", 
   RowBox[{"ByteArray", "[", 
    RowBox[{"{", 
     RowBox[{
     "197", ",", "212", ",", "85", ",", "198", ",", "167", ",", "81", ",", 
      "53", ",", "137", ",", "123", ",", "254", ",", "223", ",", "171", ",", 
      "107", ",", "50", ",", "6", ",", "107", ",", "225", ",", "85", ",", 
      "150", ",", "100", ",", "64", ",", "2", ",", "75", ",", "119", ",", 
      "143", ",", "63", ",", "152", ",", "170", ",", "179", ",", "43", ",", 
      "47", ",", "153", ",", "113", ",", "135", ",", "76", ",", "63", ",", 
      "182", ",", "206", ",", "135", ",", "102", ",", "20", ",", "240", ",", 
      "127", ",", "13", ",", "24", ",", "37", ",", "238", ",", "196", ",", 
      "181", ",", "81", ",", "78", ",", "47", ",", "86", ",", "215", ",", 
      "165", ",", "190", ",", "239", ",", "181", ",", "184", ",", "245", ",", 
      "140", ",", "153", ",", "85", ",", "203", ",", "228", ",", "240", ",", 
      "247", ",", "144", ",", "34", ",", "177", ",", "153", ",", "64", ",", 
      "97", ",", "126", ",", "25", ",", "94", ",", "63", ",", "56", ",", 
      "103", ",", "140", ",", "108", ",", "16", ",", "34", ",", "178", ",", 
      "150", ",", "125", ",", "164", ",", "249", ",", "197", ",", "111", ",", 
      "103", ",", "137", ",", "112", ",", "43", ",", "219", ",", "203", ",", 
      "52", ",", "116", ",", "11", ",", "223", ",", "86", ",", "230", ",", 
      "83", ",", "77", ",", "86", ",", "160", ",", "161", ",", "207", ",", 
      "12", ",", "128", ",", "247", ",", "242", ",", "100", ",", "127", ",", 
      "104", ",", "62", ",", "218", ",", "51", ",", "50", ",", "181", ",", 
      "71", ",", "20", ",", "148", ",", "185", ",", "73", ",", "43", ",", 
      "169", ",", "52", ",", "15", ",", "231", ",", "25", ",", "148", ",", 
      "43", ",", "56", ",", "97", ",", "172", ",", "107", ",", "60", ",", 
      "140", ",", "236", ",", "50", ",", "109", ",", "224", ",", "21", ",", 
      "21", ",", "176", ",", "159", ",", "229", ",", "232", ",", "148", ",", 
      "3", ",", "149", ",", "27", ",", "132", ",", "138", ",", "63", ",", 
      "223", ",", "212", ",", "63", ",", "252", ",", "178", ",", "61", ",", 
      "240", ",", "63", ",", "119", ",", "86", ",", "220", ",", "7", ",", 
      "157", ",", "240", ",", "236", ",", "39", ",", "89", ",", "116", ",", 
      "195", ",", "69", ",", "195", ",", "161", ",", "214", ",", "20", ",", 
      "134", ",", "2", ",", "25", ",", "126", ",", "223", ",", "233", ",", 
      "145", ",", "159", ",", "39", ",", "218", ",", "206", ",", "171", ",", 
      "8", ",", "248", ",", "116", ",", "218", ",", "37", ",", "241", ",", 
      "125", ",", "76", ",", "110", ",", "36", ",", "49", ",", "107", ",", 
      "213", ",", "198", ",", "57", ",", "46", ",", "224", ",", "109", ",", 
      "125", ",", "134", ",", "85", ",", "182", ",", "4", ",", "173", ",", 
      "240", ",", "194", ",", "214", ",", "113", ",", "67", ",", "199", ",", 
      "34", ",", "229", ",", "150", ",", "10", ",", "46", ",", "49", ",", 
      "235", ",", "245", ",", "3", ",", "20", ",", "108", ",", "53", ",", 
      "204", ",", "141", ",", "222", ",", "230", ",", "76", ",", "143", ",", 
      "9", ",", "127", ",", "67", ",", "68", ",", "30", ",", "212", ",", "67",
       ",", "179", ",", "74", ",", "99", ",", "129", ",", "99", ",", "105", 
      ",", "7", ",", "217", ",", "92", ",", "153", ",", "80", ",", "46", ",", 
      "3", ",", "126", ",", "207", ",", "147", ",", "180", ",", "15", ",", 
      "2", ",", "216", ",", "78", ",", "172", ",", "33", ",", "187", ",", 
      "203", ",", "150", ",", "92", ",", "24", ",", "119", ",", "121", ",", 
      "43", ",", "66", ",", "238", ",", "135", ",", "62", ",", "182", ",", 
      "40", ",", "236", ",", "34", ",", "228", ",", "227", ",", "187", ",", 
      "171", ",", "189", ",", "135", ",", "196", ",", "94", ",", "128", ",", 
      "18", ",", "187", ",", "191", ",", "180", ",", "89", ",", "48", ",", 
      "207", ",", "244", ",", "42", ",", "94", ",", "154", ",", "17", ",", 
      "51", ",", "230", ",", "106", ",", "5", ",", "16", ",", "31", ",", "5", 
      ",", "65", ",", "166", ",", "230", ",", "69", ",", "196", ",", "37", 
      ",", "165", ",", "146", ",", "33", ",", "23", ",", "152", ",", "96", 
      ",", "79", ",", "103", ",", "71", ",", "220", ",", "133", ",", "173", 
      ",", "163", ",", "230", ",", "28", ",", "207", ",", "67", ",", "59", 
      ",", "232", ",", "107", ",", "20", ",", "71", ",", "4", ",", "228", ",",
       "220", ",", "201", ",", "97", ",", "68", ",", "219", ",", "177", ",", 
      "68", ",", "234", ",", "213", ",", "14", ",", "31", ",", "89", ",", 
      "159", ",", "87", ",", "31", ",", "200", ",", "233", ",", "223", ",", 
      "15", ",", "211", ",", "178", ",", "230", ",", "46", ",", "33", ",", 
      "28", ",", "137", ",", "224", ",", "138", ",", "204", ",", "180", ",", 
      "33", ",", "12", ",", "155", ",", "27", ",", "58", ",", "186", ",", 
      "196", ",", "81", ",", "24", ",", "112", ",", "30", ",", "112", ",", 
      "182", ",", "96", ",", "88", ",", "61", ",", "253", ",", "47", ",", 
      "125", ",", "245", ",", "153", ",", "49", ",", "5", ",", "248", ",", 
      "230", ",", "192", ",", "18", ",", "179", ",", "121", ",", "60", ",", 
      "0", ",", "7", ",", "75", ",", "70", ",", "150", ",", "206", ",", "144",
       ",", "164", ",", "165", ",", "211", ",", "233", ",", "159", ",", "80", 
      ",", "239", ",", "181", ",", "164", ",", "73", ",", "187", ",", "184", 
      ",", "180", ",", "49", ",", "162", ",", "75", ",", "160", ",", "171", 
      ",", "69", ",", "64", ",", "140", ",", "100", ",", "55", ",", "15", ",",
       "121", ",", "73", ",", "106", ",", "243", ",", "28", ",", "98", ",", 
      "143", ",", "147", ",", "50", ",", "124", ",", "120", ",", "122", ",", 
      "55", ",", "227", ",", "160", ",", "4", ",", "72", ",", "233", ",", 
      "172", ",", "31", ",", "63", ",", "4", ",", "196", ",", "112", ",", 
      "240", ",", "169", ",", "163", ",", "156", ",", "6", ",", "64", ",", 
      "246", ",", "149", ",", "11", ",", "240", ",", "5", ",", "254", ",", 
      "144", ",", "152", ",", "52", ",", "180", ",", "238", ",", "255", ",", 
      "111", ",", "211", ",", "113", ",", "160", ",", "120", ",", "243", ",", 
      "226", ",", "135", ",", "173", ",", "103", ",", "186", ",", "152", ",", 
      "88", ",", "142", ",", "69", ",", "151", ",", "120", ",", "81", ",", 
      "164", ",", "231", ",", "176", ",", "32", ",", "46", ",", "241", ",", 
      "125", ",", "67", ",", "255", ",", "243", ",", "31", ",", "184", ",", 
      "134", ",", "180", ",", "142", ",", "111", ",", "89", ",", "76", ",", 
      "13", ",", "194", ",", "188", ",", "148", ",", "32", ",", "19", ",", 
      "56", ",", "89", ",", "249", ",", "205", ",", "220", ",", "100", ",", 
      "29", ",", "145", ",", "142", ",", "78", ",", "19", ",", "12", ",", 
      "150", ",", "51", ",", "85", ",", "147", ",", "104", ",", "166", ",", 
      "231", ",", "99", ",", "40", ",", "196", ",", "191", ",", "132", ",", 
      "236", ",", "177", ",", "122", ",", "23", ",", "81", ",", "171", ",", 
      "58", ",", "10", ",", "103", ",", "32", ",", "66", ",", "174", ",", 
      "144", ",", "88", ",", "37", ",", "93", ",", "115", ",", "108", ",", 
      "150", ",", "95", ",", "71", ",", "37", ",", "63", ",", "200", ",", 
      "138", ",", "199", ",", "24", ",", "242", ",", "63", ",", "253", ",", 
      "84", ",", "75", ",", "40", ",", "221", ",", "224", ",", "53", ",", 
      "119", ",", "42", ",", "163", ",", "242", ",", "231", ",", "20", ",", 
      "226", ",", "73", ",", "120", ",", "173", ",", "31", ",", "225", ",", 
      "102", ",", "241", ",", "211", ",", "17", ",", "162", ",", "110", ",", 
      "3", ",", "65", ",", "228", ",", "13", ",", "102", ",", "248", ",", 
      "211", ",", "124", ",", "188", ",", "185", ",", "181", ",", "230", ",", 
      "56", ",", "223", ",", "89", ",", "139", ",", "167", ",", "42", ",", 
      "113", ",", "211", ",", "150", ",", "214", ",", "43", ",", "180", ",", 
      "92", ",", "145", ",", "231", ",", "153", ",", "134", ",", "204", ",", 
      "140", ",", "163", ",", "229", ",", "132", ",", "115", ",", "185", ",", 
      "254", ",", "10", ",", "132", ",", "11", ",", "29", ",", "25", ",", 
      "95", ",", "197", ",", "200", ",", "126", ",", "132", ",", "75", ",", 
      "96", ",", "37", ",", "168", ",", "101", ",", "133", ",", "48", ",", 
      "91", ",", "148", ",", "33", ",", "98", ",", "176", ",", "238", ",", 
      "81", ",", "158", ",", "179", ",", "186", ",", "134", ",", "158", ",", 
      "62", ",", "76", ",", "191", ",", "102", ",", "9", ",", "149", ",", 
      "179", ",", "12", ",", "135", ",", "193", ",", "12", ",", "236", ",", 
      "122", ",", "59", ",", "34", ",", "204", ",", "105", ",", "204", ",", 
      "245", ",", "90", ",", "135", ",", "121", ",", "26", ",", "182", ",", 
      "252", ",", "94", ",", "91", ",", "207", ",", "212", ",", "216", ",", 
      "84", ",", "201", ",", "25", ",", "208", ",", "79", ",", "239", ",", 
      "30", ",", "82", ",", "139", ",", "54", ",", "24", ",", "79", ",", 
      "199", ",", "74", ",", "45", ",", "145", ",", "63", ",", "235", ",", 
      "146", ",", "174", ",", "92", ",", "161", ",", "122", ",", "91", ",", 
      "181", ",", "77", ",", "52", ",", "194", ",", "97", ",", "186", ",", 
      "76", ",", "6", ",", "148", ",", "59", ",", "68", ",", "81", ",", "161",
       ",", "6", ",", "198", ",", "171", ",", "194", ",", "21", ",", "26", 
      ",", "188", ",", "211", ",", "226", ",", "125", ",", "86", ",", "101", 
      ",", "156", ",", "245", ",", "85", ",", "196", ",", "152", ",", "81", 
      ",", "112", ",", "72", ",", "114", ",", "200", ",", "43", ",", "178", 
      ",", "128", ",", "91", ",", "234", ",", "182", ",", "4", ",", "243", 
      ",", "95", ",", "109", ",", "13", ",", "186", ",", "173", ",", "121", 
      ",", "239", ",", "46", ",", "64", ",", "122", ",", "210", ",", "30", 
      ",", "194", ",", "97", ",", "21", ",", "111", ",", "185", ",", "153", 
      ",", "99", ",", "49", ",", "132", ",", "182", ",", "212", ",", "171", 
      ",", "113", ",", "207", ",", "149", ",", "152", ",", "43", ",", "247", 
      ",", "191", ",", "226", ",", "140", ",", "116", ",", "211", ",", "39", 
      ",", "17", ",", "23", ",", "82", ",", "191"}], "}"}], "]"}]}], ";"}]], \
"Input",
 CellChangeTimes->{{3.8020359553701887`*^9, 3.8020359626720743`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"4124bfbb-2bb0-40bf-a6fc-a95e7e925e48"],

Cell[BoxData[
 RowBox[{
  RowBox[{"payload", "//", "ToHex"}], "//", "Short"}]], "Input",
 CellChangeTimes->{{3.797486168963546*^9, 3.7974861732978563`*^9}, {
  3.797641971286497*^9, 3.79764197886698*^9}, {3.797642248331767*^9, 
  3.7976422490161133`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"74deaff3-96b5-4e48-8fd4-0e799c670326"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Encode payload as CBOR", "Section",
 CellChangeTimes->{{3.797625748536974*^9, 3.797625762717578*^9}, {
  3.797640141235968*^9, 
  3.797640143992692*^9}},ExpressionUUID->"dede6cd1-6872-4ad2-a28c-\
df0fa3295322"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cborPayload", "=", 
   RowBox[{"CBOREncodeBytes", "[", "payload", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.797625767490757*^9, 3.79762579070324*^9}, 
   3.797642058272148*^9},
 CellLabel->"In[18]:=",ExpressionUUID->"a27f87b6-d55b-401d-977f-7dab17c63295"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cborPayload", "//", "ToHex"}], "//", "Short"}]], "Input",
 CellChangeTimes->{{3.797642060596916*^9, 3.7976420688899517`*^9}, 
   3.797642281210484*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"c321b8db-f908-4997-bcec-15154839bd0c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Encode CBOR payload as Bytewords", "Section",
 CellChangeTimes->{{3.7976401546349363`*^9, 3.7976401619926243`*^9}, {
  3.801965396909854*^9, 
  3.801965398225564*^9}},ExpressionUUID->"7c22571e-1b3d-4d8d-afe7-\
ce6defdc9ca3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bytewordsPayload", "=", 
   RowBox[{"BytewordsEncodeMinimal", "[", "cborPayload", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.797640163608663*^9, 3.797640186037183*^9}, 
   3.801965202993333*^9, 3.8019652701112967`*^9, {3.8019653633398657`*^9, 
   3.801965365819829*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"7cd3918e-9bff-48c6-b823-812f7cdc094f"],

Cell[BoxData[
 RowBox[{"bytewordsPayload", "//", "Short"}]], "Input",
 CellChangeTimes->{{3.797642154406281*^9, 3.797642159712694*^9}, 
   3.801965367425796*^9},
 CellLabel->"In[25]:=",ExpressionUUID->"92ecfed0-0bda-42d7-adea-972392957969"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Compute the CRC32 checksum of the CBOR-encoded payload", "Section",
 CellChangeTimes->{{3.797350844427909*^9, 3.797350849512577*^9}, {
   3.797351119841743*^9, 3.797351121112924*^9}, {3.797352223524745*^9, 
   3.79735222404268*^9}, {3.79735807304121*^9, 3.797358076517144*^9}, {
   3.797358167982003*^9, 3.79735816940923*^9}, {3.79739763154828*^9, 
   3.797397652379792*^9}, 3.797397692038342*^9, 3.797397738456067*^9, {
   3.797640122977394*^9, 3.797640123419099*^9}, {3.7976424452529984`*^9, 
   3.797642458346835*^9}, 3.797657571942519*^9, {3.802621839806444*^9, 
   3.802621840525992*^9}, {3.802624629174787*^9, 
   3.802624630194037*^9}},ExpressionUUID->"abe4d000-8d78-4609-84cd-\
d312fbac2540"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CRC32Checksum", "[", "bytes_", "]"}], ":=", 
   RowBox[{"BytewordsHash", "[", "bytes", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.797639843333578*^9, 3.7976398635511007`*^9}, {
  3.802621852588231*^9, 3.802621854926517*^9}, {3.802621889726969*^9, 
  3.8026218973029203`*^9}, {3.802622004090486*^9, 3.802622006953781*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"96a43bd2-cfc5-45ea-9bf0-00c08d275de1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"checksum", "=", 
   RowBox[{"CRC32Checksum", "[", "cborPayload", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.802621901790408*^9, 3.8026219199828463`*^9}, 
   3.802622008680202*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"17322e8d-d9e6-40e2-a432-0c906e0210ff"],

Cell[BoxData[
 RowBox[{"checksum", "//", "ToHex"}]], "Input",
 CellChangeTimes->{{3.797642219458324*^9, 3.797642232692011*^9}, {
  3.8020361100285683`*^9, 3.8020361138054943`*^9}, {3.80262192671994*^9, 
  3.802621928429854*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"f716d29c-467f-449d-ae0f-5968151de859"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Encode checksum as Bytewords", "Section",
 CellChangeTimes->{{3.797642462848939*^9, 3.7976424712746267`*^9}, 
   3.801965399902998*^9, 
   3.802621929451685*^9},ExpressionUUID->"07f17943-d062-4fb2-b150-\
32ce0259a4f4"],

Cell["\<\
This is a \[OpenCurlyDoubleQuote]brutal\[CloseCurlyDoubleQuote] encoding \
because the payload is not itself CBOR.\
\>", "Text",
 CellChangeTimes->{{3.801965610054246*^9, 
  3.8019656456942873`*^9}},ExpressionUUID->"042e9c52-6888-4ac7-b828-\
2d3dd5681b94"],

Cell[BoxData[
 RowBox[{
  RowBox[{"bytewordsChecksum", "=", 
   RowBox[{"BytewordsEncodeMinimal", "[", "checksum", "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.79735087089253*^9, 3.79735093024367*^9}, {
   3.797350979993737*^9, 3.797350994528427*^9}, {3.7973510602743893`*^9, 
   3.7973510640532227`*^9}, {3.79735240474373*^9, 3.7973524055516853`*^9}, {
   3.79735482354692*^9, 3.797354839712674*^9}, {3.7973554985870533`*^9, 
   3.797355560887813*^9}, {3.797355601795301*^9, 3.797355691617443*^9}, 
   3.797358551061639*^9, 3.797397634146935*^9, {3.797397761484837*^9, 
   3.7973977652961817`*^9}, 3.797483452987975*^9, {3.797485937609914*^9, 
   3.7974859397456493`*^9}, {3.7974860233474092`*^9, 3.7974860277773933`*^9}, 
   3.797625808031801*^9, {3.797639765056429*^9, 3.797639802348365*^9}, {
   3.7976398702335863`*^9, 3.7976398800976048`*^9}, {3.797642580191511*^9, 
   3.797642581265725*^9}, 3.801965204467773*^9, 3.801965271473226*^9, 
   3.801965368966374*^9, {3.802621931999837*^9, 3.802621936633411*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"1798e3e0-fd84-4df8-852b-3db870e3c6d2"],

Cell[BoxData["bytewordsChecksum"], "Input",
 CellChangeTimes->{{3.797642583840886*^9, 3.797642585766464*^9}, 
   3.801965370339534*^9, {3.80262193829967*^9, 3.802621939287807*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"4aded097-e8a0-436e-b205-a812868f45c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Partition the Bytewords-encoded payload into a sequence of fragments\
\>", "Section",
 CellChangeTimes->{{3.79735118546411*^9, 3.79735121036008*^9}, {
   3.79735808981584*^9, 3.79735810672338*^9}, {3.7973582209799967`*^9, 
   3.797358222104664*^9}, {3.797640293439033*^9, 3.79764029670096*^9}, {
   3.797642660838315*^9, 3.7976426638082323`*^9}, 
   3.801965401028081*^9},ExpressionUUID->"4a395c92-0eee-427b-8100-\
1a94357f8dad"],

Cell[TextData[{
 "As each fragment represents a specific range of bytes, ",
 StyleBox["maximumFragmentCharacters",
  FontSlant->"Italic"],
 " must be even to ensure that each segment has an even number of \
characters."
}], "Text",
 CellChangeTimes->{{3.801965979328176*^9, 
  3.801966082356909*^9}},ExpressionUUID->"fd6b9fde-e950-4455-a3b9-\
9f8d480b009c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"FindEvenNominalFragmentLength", "[", 
    RowBox[{"payloadLen_", ",", "minFragmentLen_", ",", "maxFragmentLen_"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"maxFragmentCount", ",", "fragmentCount", ",", "fragmentLen"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"maxFragmentCount", "=", 
       RowBox[{"Quotient", "[", 
        RowBox[{"payloadLen", ",", "minFragmentLen"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"fragmentCount", "=", "1"}], ",", 
        RowBox[{"fragmentCount", "\[LessEqual]", "maxFragmentCount"}], ",", 
        RowBox[{"fragmentCount", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"fragmentLen", "=", 
          RowBox[{"Ceiling", "[", 
           RowBox[{"payloadLen", "/", "fragmentCount"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"fragmentLen", "\[LessEqual]", "maxFragmentLen"}], "&&", 
            RowBox[{"EvenQ", "[", "fragmentLen", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Return", "[", "fragmentLen", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.802623606460957*^9, 3.802623646436509*^9}, {
   3.802623751378697*^9, 3.802623909268318*^9}, 3.80262394620273*^9, {
   3.8026241512228193`*^9, 3.802624162831767*^9}, {3.802625205019745*^9, 
   3.802625249551474*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"f4e94f65-791b-47cd-8a81-58829bfbebe3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"maximumFragmentCharacters", "=", "500"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"nominalFragmentCharacters", "=", 
  RowBox[{"FindEvenNominalFragmentLength", "[", 
   RowBox[{
    RowBox[{"StringLength", "[", "bytewordsPayload", "]"}], ",", "10", ",", 
    "500"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.802622218384582*^9, 3.8026222529418993`*^9}, {
   3.8026222844147*^9, 3.802622285125937*^9}, {3.8026223252447453`*^9, 
   3.802622376123304*^9}, 3.8026224387212887`*^9, 3.802622618613842*^9, {
   3.8026230154272623`*^9, 3.802623030318964*^9}, 3.8026242457714233`*^9, {
   3.802624935869976*^9, 3.802624941282927*^9}, {3.802625016673794*^9, 
   3.8026250204685793`*^9}, 3.802625214499812*^9, {3.802625256361053*^9, 
   3.8026252609213133`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"50cf512d-c99f-48d4-a69d-15627b4d2db6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"fragments", "=", 
   RowBox[{"StringPartition", "[", 
    RowBox[{"bytewordsPayload", ",", 
     RowBox[{"UpTo", "[", "nominalFragmentCharacters", "]"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.797351218162107*^9, 3.797351225266605*^9}, {
   3.7973512905197153`*^9, 3.797351294083762*^9}, {3.797351712543487*^9, 
   3.797351712729081*^9}, {3.797351743349804*^9, 3.797351744797225*^9}, {
   3.7973522724649*^9, 3.797352278391781*^9}, 3.79735445193248*^9, {
   3.797358224627417*^9, 3.79735822572745*^9}, {3.797358274059732*^9, 
   3.797358277502164*^9}, {3.797358321108281*^9, 3.797358323693611*^9}, {
   3.797358575114464*^9, 3.797358576134884*^9}, {3.797360779994465*^9, 
   3.797360784647973*^9}, {3.797486367118967*^9, 3.79748636835296*^9}, 
   3.797640370202701*^9, 3.801965386258597*^9, 3.802622386176916*^9, 
   3.802625028632431*^9},
 CellLabel->"In[32]:=",ExpressionUUID->"4bb29597-4af3-451b-b455-a2faef29bbf5"],

Cell[BoxData[
 RowBox[{"StringLength", "/@", "fragments"}]], "Input",
 CellChangeTimes->{{3.802622395924636*^9, 3.802622420783862*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"91e6f478-1c17-4734-a14c-21f8d2b81e04"],

Cell[BoxData[
 RowBox[{"First", "[", "fragments", "]"}]], "Input",
 CellChangeTimes->{{3.7974862965712013`*^9, 3.797486311001957*^9}, {
  3.797486399562994*^9, 3.797486401641777*^9}, {3.797643173899973*^9, 
  3.797643174673402*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"e0f14afa-5904-4394-aa02-f9ff11a09d57"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Prepend each fragment with a header that includes scheme, the checksum, and \
sequencing\
\>", "Section",
 CellChangeTimes->{{3.797351727011155*^9, 3.7973517333559923`*^9}, {
   3.797358042271845*^9, 3.797358048076936*^9}, {3.797358368233488*^9, 
   3.797358369177498*^9}, {3.797397929291326*^9, 3.797397932193614*^9}, {
   3.7976404247400093`*^9, 3.7976404254702797`*^9}, {3.7976428831310368`*^9, 
   3.79764289459385*^9}, 
   3.80262194077348*^9},ExpressionUUID->"bb7e9e85-4e49-452a-9294-\
ad51f680240d"],

Cell["\<\
The URI scheme \[OpenCurlyDoubleQuote]UR\[CloseCurlyDoubleQuote] is separated \
from the rest by a colon. Slashes are used to delimit the sequencing \
information, checksum, and the payload fragment.\
\>", "Text",
 CellChangeTimes->{{3.797358188950329*^9, 3.797358209988858*^9}, {
  3.7973978522256536`*^9, 3.797397863160823*^9}, {3.797397938885441*^9, 
  3.797398005958531*^9}, {3.797486450141919*^9, 3.797486454461461*^9}, {
  3.797645512236155*^9, 3.7976455126738863`*^9}, {3.801966098174322*^9, 
  3.8019660982303267`*^9}},ExpressionUUID->"f5f817f7-b238-4547-a08e-\
c6e8d3e0b535"],

Cell["ur:type/mOFn/checksum/fragment", "Program",
 CellChangeTimes->{{3.797397866245219*^9, 3.797397909049808*^9}, {
   3.7976258604206448`*^9, 3.7976258607005787`*^9}, {3.797645515802884*^9, 
   3.797645516059601*^9}, {3.801966110144754*^9, 3.801966142330845*^9}, 
   3.802621942904854*^9},ExpressionUUID->"0945df4f-24c4-4c9d-9073-\
c628edafcd26"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ComposeHeader", "[", 
    RowBox[{
    "part_Integer", ",", "totalFragments_Integer", ",", "type_String", ",", 
     "checksum_String", ",", " ", "fragment_String"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"scheme", ",", "sequence", ",", "header"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"scheme", "=", "\"\<ur\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"sequence", "=", 
       RowBox[{
        RowBox[{"ToString", "[", "part", "]"}], "<>", "\"\<of\>\"", "<>", 
        RowBox[{"ToString", "[", "totalFragments", "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"header", "=", 
       RowBox[{"scheme", "<>", "\"\<:\>\"", "<>", "sequence"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"scheme", "<>", "\"\<:\>\"", "<>", 
       RowBox[{"StringRiffle", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"type", ",", "sequence", ",", "checksum", ",", "fragment"}],
           "}"}], ",", "\"\</\>\""}], "]"}]}]}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AddHeadersToFragments", "[", 
    RowBox[{"fragments_", ",", "type_", ",", "checksum_"}], "]"}], ":=", 
   RowBox[{"MapIndexed", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ComposeHeader", "[", 
       RowBox[{
        RowBox[{"#2", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", 
        RowBox[{"Length", "[", "fragments", "]"}], ",", "type", ",", 
        "checksum", ",", "#1"}], "]"}], "&"}], ",", "fragments"}], "]"}]}], 
  ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.797358600016955*^9, {3.797361124593802*^9, 3.797361136202531*^9}, {
   3.797483501745846*^9, 3.7974835078857327`*^9}, 3.797486467491219*^9, {
   3.79764094923556*^9, 3.79764099915117*^9}, {3.797641134683034*^9, 
   3.797641192573563*^9}, {3.797641235609416*^9, 3.7976412663507147`*^9}, {
   3.7976413347432547`*^9, 3.797641344901585*^9}, {3.797645518413658*^9, 
   3.797645518749415*^9}, {3.797657669672442*^9, 3.797657703611516*^9}, {
   3.802621946207244*^9, 3.8026219541401787`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"a2d415e3-b04c-4be4-b339-07bbdd422da0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"parts", "=", 
   RowBox[{"AddHeadersToFragments", "[", 
    RowBox[{"fragments", ",", "\"\<bytes\>\"", ",", "bytewordsChecksum"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.797351789373055*^9, 3.79735179600873*^9}, {
   3.797351828847599*^9, 3.797351889150717*^9}, {3.79735193233939*^9, 
   3.79735216072678*^9}, {3.797352307913604*^9, 3.797352379104197*^9}, {
   3.797352674263659*^9, 3.797352683610345*^9}, {3.797353611624477*^9, 
   3.7973536268663273`*^9}, {3.797354399729486*^9, 3.797354400144454*^9}, {
   3.797358235033638*^9, 3.797358237079091*^9}, {3.797358338128399*^9, 
   3.7973583561611843`*^9}, 3.797358597256374*^9, 3.7973615325226307`*^9, 
   3.797361593226746*^9, 3.7974864773129597`*^9, 3.797640943152403*^9, {
   3.797641010321384*^9, 3.797641011422861*^9}, {3.7976413416630287`*^9, 
   3.7976413417959433`*^9}, {3.797657713299766*^9, 3.7976577145450783`*^9}, 
   3.801965387394621*^9, {3.802621956900256*^9, 3.8026219578430443`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"dcb54a0d-5bcb-477d-a381-7eae68441606"],

Cell[BoxData[
 RowBox[{"First", "[", "parts", "]"}]], "Input",
 CellChangeTimes->{{3.797642933768526*^9, 3.79764295899216*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"11257d70-b623-480d-ba18-2bb2546ad9f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generate the QR Codes from the fragments", "Section",
 CellChangeTimes->{{3.797352551375813*^9, 3.7973525541544533`*^9}, {
  3.797358038436474*^9, 3.797358040145361*^9}, {3.7973583750744333`*^9, 
  3.7973583761193027`*^9}},ExpressionUUID->"469c6184-7c9c-425a-b2ed-\
59bc9875b25e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MakeQRCode", "[", "string_String", "]"}], ":=", 
   RowBox[{"BarcodeImage", "[", 
    RowBox[{
     RowBox[{"ToUpperCase", "[", "string", "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"\"\<QR\>\"", ",", " ", "\"\<L\>\""}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeQRCodes", "[", "parts_", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{"MakeQRCode", ",", "parts"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DisplayQRCodes", "[", "barcodes_", "]"}], ":=", 
  RowBox[{"Framed", "[", 
   RowBox[{
    RowBox[{"Grid", "[", 
     RowBox[{
      RowBox[{"Partition", "[", 
       RowBox[{"barcodes", ",", 
        RowBox[{"UpTo", "[", "4", "]"}]}], "]"}], ",", 
      RowBox[{"Spacings", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"3", ",", "3"}], "}"}]}]}], "]"}], ",", 
    RowBox[{"FrameMargins", "\[Rule]", "30"}], ",", 
    RowBox[{"FrameStyle", "\[Rule]", "None"}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.797360807093083*^9, {3.797360843455127*^9, 3.797360859102767*^9}, {
   3.7973616066036663`*^9, 3.797361606691271*^9}, {3.797483563744689*^9, 
   3.797483567859995*^9}, 3.797483650021989*^9, {3.797487143577527*^9, 
   3.7974871482454453`*^9}, {3.797641429345601*^9, 3.797641474266821*^9}, {
   3.7976417121059923`*^9, 3.797641729518922*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"2cc61590-9f70-4ef7-8c33-6c0ba704176f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"qrCodes", "=", 
   RowBox[{"MakeQRCodes", "[", "parts", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.797352714562665*^9, 3.797352791329958*^9}, {
   3.797352838525508*^9, 3.797352886575397*^9}, 3.797354552091269*^9, {
   3.797355173300428*^9, 3.797355198195105*^9}, {3.797355289672038*^9, 
   3.797355293067285*^9}, {3.79735725213612*^9, 3.797357353552965*^9}, {
   3.797357385405024*^9, 3.7973573995101*^9}, {3.797358615829359*^9, 
   3.797358616658698*^9}, {3.7974869801136007`*^9, 3.7974869806279993`*^9}, {
   3.797641450013575*^9, 3.797641457288303*^9}, {3.7976416925880327`*^9, 
   3.797641717203691*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"96c5b334-0ea5-447e-a48b-563fe8f87864"],

Cell[BoxData[
 RowBox[{"DisplayQRCodes", "[", "qrCodes", "]"}]], "Input",
 CellChangeTimes->{
  3.797487023617133*^9, {3.797641480353701*^9, 3.797641488338943*^9}, 
   3.797641696953465*^9, 3.797641732658399*^9},
 CellLabel->"In[38]:=",ExpressionUUID->"62e27ce3-0081-4c48-b07e-a0051ac72506"],

Cell[BoxData[
 RowBox[{"BarcodeRecognize", "[", 
  RowBox[{"First", "[", "qrCodes", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.797658168729721*^9, 3.7976581781180267`*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"fe10781a-f0c2-439a-8de2-411524acd18b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MakeUR", "[", 
   RowBox[{"type_", ",", "hex_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ur", ",", "qr"}], "}"}], ",", 
    RowBox[{
     RowBox[{"ur", "=", 
      RowBox[{
      "\"\<ur:\>\"", " ", "<>", " ", "type", " ", "<>", "\"\</\>\"", " ", "<>",
        " ", 
       RowBox[{"BytewordsEncodeMinimal", "[", 
        RowBox[{"FromHex", "[", "hex", "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "ur", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"MakeQRCode", "[", "ur", "]"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeMultipartUR", "[", 
    RowBox[{"type_", ",", "cborHex_", ",", "maximumFragmentCharacters_"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "cborPayload", ",", "bytewordsPayload", ",", "checksum", ",", 
       "bytewordsChecksum", ",", "fragments", ",", "parts", ",", 
       "fragmentCount", ",", "nominalFragmentCharacters", ",", 
       "evenFragmentsTotal"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"cborPayload", "=", 
       RowBox[{"FromHex", "[", "cborHex", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"bytewordsPayload", "=", 
       RowBox[{"BytewordsEncodeMinimal", "[", "cborPayload", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"checksum", "=", 
       RowBox[{"CRC32Checksum", "[", "cborPayload", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"bytewordsChecksum", "=", 
       RowBox[{"BytewordsEncodeMinimal", "[", "checksum", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "fragmentCount", ",", "nominalFragmentCharacters", ",", 
         "evenFragmentsTotal"}], "}"}], "=", 
       RowBox[{"FindEvenNominalFragmentLength", "[", 
        RowBox[{
         RowBox[{"StringLength", "[", "bytewordsPayload", "]"}], ",", "10", 
         ",", "maximumFragmentCharacters"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"fragments", "=", 
       RowBox[{"StringPartition", "[", 
        RowBox[{"bytewordsPayload", ",", 
         RowBox[{"UpTo", "[", "nominalFragmentCharacters", "]"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", " ", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "fragments", "]"}], "\[Equal]", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"parts", "=", 
          RowBox[{"{", 
           RowBox[{
           "\"\<ur:\>\"", " ", "<>", " ", "type", " ", "<>", "\"\</\>\"", "<>", 
            RowBox[{"First", "[", "fragments", "]"}]}], "}"}]}], ";"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"parts", "=", 
          RowBox[{"AddHeadersToFragments", "[", 
           RowBox[{"fragments", ",", "type", ",", "bytewordsChecksum"}], 
           "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"Column", "[", "parts", "]"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"DisplayQRCodes", "[", 
        RowBox[{"MakeQRCodes", "[", "parts", "]"}], "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.800650297986422*^9, 3.8006504335277452`*^9}, 
   3.8019652061106863`*^9, 3.8019652730588913`*^9, {3.8020410882379217`*^9, 
   3.802041127870166*^9}, {3.802108254862197*^9, 3.802108276945752*^9}, {
   3.802621962481745*^9, 3.802622010091407*^9}, {3.802625060489501*^9, 
   3.802625081086874*^9}, 
   3.8026252162235823`*^9},ExpressionUUID->"225b2aac-27e6-4e09-93a8-\
0a3bbd491b56"],

Cell[BoxData[
 RowBox[{"MakeUR", "[", 
  RowBox[{
  "\"\<crypto-sskr\>\"", ",", 
   "\"\<d901355576220220b86ab8636212aab84200a070975a641972\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.800650411669529*^9, 3.800650473104458*^9}, 
   3.800650551906776*^9, {3.800650630722493*^9, 3.800650632004795*^9}, 
   3.800650668189528*^9, 3.8006507459824877`*^9, {3.800652272931015*^9, 
   3.800652275088678*^9}, 3.800652804794414*^9, 3.800653536479013*^9, 
   3.800667075609108*^9, 3.800667923420238*^9, 3.800669161270734*^9, {
   3.8020402537700853`*^9, 3.802040270252195*^9}, {3.802040660095551*^9, 
   3.802040678021085*^9}, {3.802040757015636*^9, 3.802040760361403*^9}, {
   3.802040816682523*^9, 3.802040818754587*^9}, {3.802108287196394*^9, 
   3.802108323178672*^9}, 3.802108361946262*^9, {3.802112061382189*^9, 
   3.802112063904759*^9}, 3.802112116533284*^9, {3.80211217978887*^9, 
   3.802112182244722*^9}, 3.802112230429119*^9, {3.8021123252576733`*^9, 
   3.802112327778281*^9}, 3.802112385066296*^9, {3.8021124615192413`*^9, 
   3.8021125537732077`*^9}, {3.802120875354186*^9, 3.80212087805554*^9}, 
   3.8021211869972477`*^9, 3.8021224167651176`*^9, 3.802122820317664*^9},
 CellLabel->
  "In[203]:=",ExpressionUUID->"a4ff2a4b-6c90-45dd-85eb-63b7ea5b9faa"],

Cell[BoxData[
 RowBox[{"BytewordsEncode", "[", 
  RowBox[{
  "FromHex", "[", 
   "\"\<d901355576220220b86ab8636212aab84200a070975a641972\>\"", "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8021212062300453`*^9, 3.802121217162356*^9}, 
   3.802122497030559*^9, 3.80212283636847*^9},
 CellLabel->
  "In[204]:=",ExpressionUUID->"35c4d328-9508-4e29-8d97-804851a8df67"],

Cell[BoxData[
 RowBox[{"MakeMultipartUR", "[", 
  RowBox[{
  "\"\<crypto-slip39\>\"", ",", 
   "\"\<A1018394657370656E6464726F6D706861636164656D6963646163696466636C69656E\
74687072656461746F7268726573706F6E73656461786C656663616E796F6E6863617465676F72\
796477696E65667665726966796668617A61726468656C657661746F72686272696566696E6767\
6761726261676567706572666563746864617461626173656864697361737465726662726F6B65\
6E94657370656E6464726F6D706861636164656D6963666167656E63796461636E656673687269\
6D706861697263726166746873796D626F6C6963656D61796F7264747275656673636172656465\
736861727066706174656E746569766F72796663656E74657265666174616C657072697A656763\
72797374616C676C656374757265646865726494657370656E6464726F6D706861636164656D69\
6366616C776179736663726564697465686169727964736C6F77666F627461696E6777656C636F\
6D656770726576656E74646C65616667636F6D70616E796864697374616E636566646574656374\
6467756D736766697368696E6766696D70616374667072617965726573686F727466666F726D61\
6C\>\"", ",", "300"}], "]"}]], "Input",
 CellChangeTimes->{{3.8021084227845488`*^9, 3.80210842860007*^9}},
 CellLabel->
  "In[182]:=",ExpressionUUID->"85ad8901-1248-4fae-b163-df4f7d83cd54"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Utilities", "Section",
 CellChangeTimes->{{3.797352551375813*^9, 3.7973525541544533`*^9}, {
  3.797358038436474*^9, 3.797358040145361*^9}, {3.7973583750744333`*^9, 
  3.7973583761193027`*^9}, {3.80067128845295*^9, 
  3.800671289453567*^9}},ExpressionUUID->"170a0f62-6443-4688-900d-\
d4101b8f13d9"],

Cell["Cleanup CDDL so CBOR.me will accept it as input", "Text",
 CellChangeTimes->{{3.800651695355926*^9, 
  3.8006517083945713`*^9}},ExpressionUUID->"7ef6d8e8-407f-4311-8b2f-\
62e85b0bbe7b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CleanupToCDDL", "[", "s_", "]"}], ":=", 
  RowBox[{"StringReplace", "[", 
   RowBox[{"s", ",", 
    RowBox[{
     RowBox[{"RegularExpression", "[", "\"\<\\\\s*;.*\>\"", "]"}], "\[Rule]", 
     "\"\<\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.800651710546842*^9, 3.800651720747513*^9}, {
  3.800651752822466*^9, 3.800651821270258*^9}, {3.800651955135767*^9, 
  3.800651974280737*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"fe55f67c-fdda-4451-a2c6-768e2f58f948"],

Cell[BoxData[
 RowBox[{"CleanupToCDDL", "[", 
  "\"\<401( ; witness-script-hash\n\t406({ ; multisig\n\t\t1: 1, ; threshold\n\
\t\t2: [ ; keys\n\t\t\t303({ ; crypto-hdkey\n\t\t\t\t3: \
h'03cbcaa9c98c877a26977d00825c956a238e8dddfbd322cce4f74b0b5bd6ace4a7', ; \
key-data\n\t\t\t\t4: \
h'60499f801b896d83179a4374aeb7822aaeaceaa0db1f85ee3e904c4defbd9689', ; \
chain-code\n\t\t\t\t6: 304({ ; origin: crypto-keypath\n\t\t\t\t\t3: 0 ; depth\
\n\t\t\t\t}),\n\t\t\t\t7: 304({ ; children: crypto-keypath\n\t\t\t\t\t1: [ ; \
components\n\t\t\t\t\t\t1, false, 0, false, [], false ; 1/0/*\n\t\t\t\t\t]\n\t\
\t\t\t})\n\t\t\t),\n\t\t\t303({ ; crypto-hdkey\n\t\t\t\t3: \
h'02fc9e5af0ac8d9b3cecfe2a888e2117ba3d089d8585886c9c826b6b22a98d12ea', ; \
key-data\n\t\t\t\t4: \
h'f0909affaa7ee7abe5dd4e100598d4dc53cd709d5a5c2cac40e7412f232f7c9c', ; \
chain-code\n\t\t\t\t6: 304({ ; origin: crypto-keypath\n\t\t\t\t\t1: [ ; \
components\n\t\t\t\t\t\t0, false\n\t\t\t\t\t],\n\t\t\t\t\t2: 3172384485 ; \
parent-fingerint\n\t\t\t\t}),\n\t\t\t\t7: 304({ ; children: crypto-keypath\n\t\
\t\t\t\t1: [ ; components\n\t\t\t\t\t\t0, false, 0, false, [], false ; 0/0/*\n\
\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t)\n\t\t]\n\t})\n)\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.800651783134419*^9, 3.800651785624434*^9}, {
   3.800651839956727*^9, 3.800651841316893*^9}, 3.800652106133026*^9, 
   3.800652198091689*^9, 3.800652719164669*^9, 3.800653385184943*^9, 
   3.800666558471418*^9, 3.800666787242942*^9, 3.800668621980837*^9},
 CellLabel->
  "In[143]:=",ExpressionUUID->"f9c28a13-0ef0-4a55-9ada-63342c960894"],

Cell["Cleanup output of CBOR.me to hex string", "Text",
 CellChangeTimes->{{3.800651624562715*^9, 
  3.800651640872088*^9}},ExpressionUUID->"3cb65b29-740b-4356-9649-\
0be94968a499"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CleanupToHexString", "[", "s_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"s", ",", 
        RowBox[{
         RowBox[{"RegularExpression", "[", "\"\<\\\\s+#.*\>\"", "]"}], 
         "\[Rule]", "\"\<\>\""}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"a", "=", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"a", ",", 
        RowBox[{
         RowBox[{"RegularExpression", "[", "\"\< \>\"", "]"}], "\[Rule]", 
         " ", "\"\<\>\""}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ToLowerCase", "[", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"a", ",", 
        RowBox[{
         RowBox[{"RegularExpression", "[", "\"\<\\n\>\"", "]"}], "\[Rule]", 
         " ", "\"\<\>\""}]}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.800651280665462*^9, 3.800651336228251*^9}, {
   3.800651402796981*^9, 3.800651583216172*^9}, {3.800651620297702*^9, 
   3.800651623153419*^9}, {3.800651654001513*^9, 3.800651658997582*^9}, {
   3.800651889750297*^9, 3.80065189164989*^9}, 3.8006519443027697`*^9},
 CellLabel->
  "In[120]:=",ExpressionUUID->"f8495faf-bf88-43d0-9df9-ba4daec56d71"],

Cell[BoxData[
 RowBox[{"CleanupToHexString", "[", 
  "\"\<D9 0191                                 # tag(401) witness-script-hash\
\n   D9 0196                              # tag(406) multisig\n      A2       \
                         # map(2)\n         01                             # \
unsigned(1) threshold\n         01                             # unsigned(1)\n\
         02                             # unsigned(2) keys\n         82       \
                      # array(2)\n            D9 012F                     # \
tag(303) crypto-hdkey\n               A4                       # map(4)\n     \
             03                    # unsigned(3) key-data\n                  \
58 21                 # bytes(33)\n                     \
03CBCAA9C98C877A26977D00825C956A238E8DDDFBD322CCE4F74B0B5BD6ACE4A7\n          \
        04                    # unsigned(4) chain-code\n                  58 \
20                 # bytes(32)\n                     \
60499F801B896D83179A4374AEB7822AAEACEAA0DB1F85EE3E904C4DEFBD9689\n            \
      06                    # unsigned(6) origin\n                  D9 0130   \
            # tag(304) crypto-keypath\n                     A1                \
 # map(1)\n                        03              # unsigned(3) depth\n      \
                  00              # unsigned(0)\n                  07         \
           # unsigned(7) children\n                  D9 0130               # \
tag(304) crypto-keypath\n                     A1                 # map(1)\n   \
                     01              # unsigned(1) components\n               \
         86              # array(6)\n                           01           \
# unsigned(1) child-index\n                           F4           # \
primitive(20) is-hardened: false\n                           00           # \
unsigned(0) child-index\n                           F4           # \
primitive(20) is-hardened: false\n                           80           # \
array(0) child-index-wildcard\n                           F4           # \
primitive(20) is-hardened: false\n            D9 012F                     # \
tag(303) crypto-hdkey\n               A4                       # map(4)\n     \
             03                    # unsigned(3) key-data\n                  \
58 21                 # bytes(33)\n                     \
02FC9E5AF0AC8D9B3CECFE2A888E2117BA3D089D8585886C9C826B6B22A98D12EA\n          \
        04                    # unsigned(4) chain-code\n                  58 \
20                 # bytes(32)\n                     \
F0909AFFAA7EE7ABE5DD4E100598D4DC53CD709D5A5C2CAC40E7412F232F7C9C\n            \
      06                    # unsigned(6) origin\n                  D9 0130   \
            # tag(304) crypto-keypath\n                     A2                \
 # map(2)\n                        01              # unsigned(1) components\n \
                       82              # array(2)\n                           \
00           # unsigned(0) child-index\n                           F4         \
  # primitive(20) is-hardened: false\n                        02              \
# unsigned(2) parent-fingerprint\n                        1A BD16BEE5     # \
unsigned(3172384485)\n                  07                    # unsigned(7) \
children\n                  D9 0130               # tag(304) crypto-keypath\n \
                    A1                 # map(1)\n                        01   \
           # unsigned(1) components\n                        86              \
# array(6)\n                           00           # unsigned(0) child-index\
\n                           F4           # primitive(20) is-hardened: false\n\
                           00           # unsigned(0) child-index\n           \
                F4           # primitive(20) is-hardened: false\n             \
              80           # array(0) child-index\n                           \
F4           # primitive(20) is-hardened: false\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.800651338105238*^9, 3.800651340163363*^9}, {
   3.800651858440599*^9, 3.800651859833762*^9}, 3.800652255079864*^9, 
   3.8006527843651743`*^9, 3.800653521845932*^9, 3.800667049514978*^9, 
   3.8006691371830683`*^9},
 CellLabel->
  "In[144]:=",ExpressionUUID->"7af76fb8-38d5-4fef-8729-4c69c9d072af"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1000, 875},
WindowMargins->{{164, Automatic}, {Automatic, 46}},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 367, 7, 160, "Title",ExpressionUUID->"8def03a4-c0bd-4f0c-a124-804dfa724276"],
Cell[950, 31, 203, 6, 85, "Subtitle",ExpressionUUID->"a054532b-4605-46ab-af96-854ffae67237"],
Cell[CellGroupData[{
Cell[1178, 41, 154, 3, 67, "Section",ExpressionUUID->"8f632d34-678b-48c8-8b78-f33a2eeda3df"],
Cell[1335, 46, 1153, 31, 89, "Input",ExpressionUUID->"7e39bc12-5f81-4a45-b7c4-9926f8b57ccc",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[2525, 82, 227, 4, 67, "Section",ExpressionUUID->"5a31f986-03ba-4f24-876c-49a8a24373ea"],
Cell[2755, 88, 20287, 392, 1811, "Input",ExpressionUUID->"8d60b1f2-b05b-41e5-9185-2917400d9a87",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[23079, 485, 226, 3, 67, "Section",ExpressionUUID->"a2a698a4-ecec-4d4f-8f9c-7265334a5844"],
Cell[23308, 490, 8586, 192, 752, "Input",ExpressionUUID->"58c4aac3-c350-4efc-936e-31d1dd311ec5",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[31931, 687, 494, 7, 67, "Section",ExpressionUUID->"46f05919-ffe7-4e70-a205-cbd9c6378a91"],
Cell[32428, 696, 270, 5, 30, "Input",ExpressionUUID->"ccde3112-fcab-4eac-9cd8-c3f3a0c5aa8d"],
Cell[32701, 703, 205, 3, 30, "Input",ExpressionUUID->"fa9ed81a-3f72-4426-8d99-c7c74875b5c7"],
Cell[32909, 708, 729, 11, 30, "Input",ExpressionUUID->"d435af03-bf53-4a0c-954d-295a7f7aeaa3"],
Cell[33641, 721, 548, 8, 30, "Input",ExpressionUUID->"0e130ac0-a461-4060-9b78-48938bb48c7d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34226, 734, 189, 3, 67, "Section",ExpressionUUID->"d3c4b16f-4de9-4a1b-933e-bee32352f23a"],
Cell[34418, 739, 551, 13, 52, "Input",ExpressionUUID->"7e6b9b81-7524-46f2-b814-4ef98dab6fe9"],
Cell[34972, 754, 205, 3, 30, "Input",ExpressionUUID->"c8d7db67-96de-4203-a57c-ed76e216687a"],
Cell[35180, 759, 205, 3, 30, "Input",ExpressionUUID->"dd570c6e-0547-4dd1-8a85-5e65d3020ca1"],
Cell[35388, 764, 192, 4, 30, "Input",ExpressionUUID->"c49ecc6e-cd00-470b-b50e-4dc92be24d0a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35617, 773, 234, 4, 67, "Section",ExpressionUUID->"d7c03100-4d61-47e8-98b8-806105237774"],
Cell[35854, 779, 397, 9, 46, "Input",ExpressionUUID->"378f91e2-f8f5-495b-bc4e-724928544407",
 InitializationCell->True],
Cell[36254, 790, 1150, 18, 30, "Input",ExpressionUUID->"cf781d10-dfc1-4f25-bb86-3dd2ed918551"],
Cell[37407, 810, 10478, 141, 787, InheritFromParent,ExpressionUUID->"4124bfbb-2bb0-40bf-a6fc-a95e7e925e48"],
Cell[47888, 953, 334, 6, 30, "Input",ExpressionUUID->"74deaff3-96b5-4e48-8fd4-0e799c670326"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48259, 964, 216, 4, 67, "Section",ExpressionUUID->"dede6cd1-6872-4ad2-a28c-df0fa3295322"],
Cell[48478, 970, 296, 6, 30, "Input",ExpressionUUID->"a27f87b6-d55b-401d-977f-7dab17c63295"],
Cell[48777, 978, 265, 5, 30, "Input",ExpressionUUID->"c321b8db-f908-4997-bcec-15154839bd0c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49079, 988, 230, 4, 67, "Section",ExpressionUUID->"7c22571e-1b3d-4d8d-afe7-ce6defdc9ca3"],
Cell[49312, 994, 392, 8, 30, "Input",ExpressionUUID->"7cd3918e-9bff-48c6-b823-812f7cdc094f"],
Cell[49707, 1004, 240, 4, 30, "Input",ExpressionUUID->"92ecfed0-0bda-42d7-adea-972392957969"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49984, 1013, 706, 10, 67, "Section",ExpressionUUID->"abe4d000-8d78-4609-84cd-d312fbac2540"],
Cell[50693, 1025, 478, 9, 46, "Input",ExpressionUUID->"96a43bd2-cfc5-45ea-9bf0-00c08d275de1",
 InitializationCell->True],
Cell[51174, 1036, 298, 6, 30, "Input",ExpressionUUID->"17322e8d-d9e6-40e2-a432-0c906e0210ff"],
Cell[51475, 1044, 307, 5, 30, "Input",ExpressionUUID->"f716d29c-467f-449d-ae0f-5968151de859"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51819, 1054, 224, 4, 67, "Section",ExpressionUUID->"07f17943-d062-4fb2-b150-32ce0259a4f4"],
Cell[52046, 1060, 266, 6, 35, "Text",ExpressionUUID->"042e9c52-6888-4ac7-b828-2d3dd5681b94"],
Cell[52315, 1068, 1099, 17, 30, "Input",ExpressionUUID->"1798e3e0-fd84-4df8-852b-3db870e3c6d2"],
Cell[53417, 1087, 259, 3, 30, "Input",ExpressionUUID->"4aded097-e8a0-436e-b205-a812868f45c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[53713, 1095, 439, 8, 67, "Section",ExpressionUUID->"4a395c92-0eee-427b-8100-1a94357f8dad"],
Cell[54155, 1105, 357, 9, 58, "Text",ExpressionUUID->"fd6b9fde-e950-4455-a3b9-9f8d480b009c"],
Cell[54515, 1116, 1803, 41, 236, "Input",ExpressionUUID->"f4e94f65-791b-47cd-8a81-58829bfbebe3",
 InitializationCell->True],
Cell[56321, 1159, 871, 16, 52, "Input",ExpressionUUID->"50cf512d-c99f-48d4-a69d-15627b4d2db6"],
Cell[57195, 1177, 967, 17, 30, "Input",ExpressionUUID->"4bb29597-4af3-451b-b455-a2faef29bbf5"],
Cell[58165, 1196, 214, 3, 30, "Input",ExpressionUUID->"91e6f478-1c17-4734-a14c-21f8d2b81e04"],
Cell[58382, 1201, 311, 5, 30, "Input",ExpressionUUID->"e0f14afa-5904-4394-aa02-f9ff11a09d57"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58730, 1211, 516, 10, 105, "Section",ExpressionUUID->"bb7e9e85-4e49-452a-9294-ad51f680240d"],
Cell[59249, 1223, 594, 10, 58, "Text",ExpressionUUID->"f5f817f7-b238-4547-a08e-c6e8d3e0b535"],
Cell[59846, 1235, 348, 5, 50, "Program",ExpressionUUID->"0945df4f-24c4-4c9d-9073-c628edafcd26"],
Cell[60197, 1242, 2264, 52, 215, "Input",ExpressionUUID->"a2d415e3-b04c-4be4-b339-07bbdd422da0",
 InitializationCell->True],
Cell[62464, 1296, 1078, 17, 30, "Input",ExpressionUUID->"dcb54a0d-5bcb-477d-a381-7eae68441606"],
Cell[63545, 1315, 206, 3, 30, "Input",ExpressionUUID->"11257d70-b623-480d-ba18-2bb2546ad9f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[63788, 1323, 286, 4, 67, "Section",ExpressionUUID->"469c6184-7c9c-425a-b2ed-59bc9875b25e"],
Cell[64077, 1329, 1491, 37, 110, "Input",ExpressionUUID->"2cc61590-9f70-4ef7-8c33-6c0ba704176f",
 InitializationCell->True],
Cell[65571, 1368, 728, 12, 30, "Input",ExpressionUUID->"96c5b334-0ea5-447e-a48b-563fe8f87864"],
Cell[66302, 1382, 291, 5, 30, "Input",ExpressionUUID->"62e27ce3-0081-4c48-b07e-a0051ac72506"],
Cell[66596, 1389, 254, 4, 30, "Input",ExpressionUUID->"fe10781a-f0c2-439a-8de2-411524acd18b"],
Cell[66853, 1395, 3840, 91, 472, "Input",ExpressionUUID->"225b2aac-27e6-4e09-93a8-0a3bbd491b56"],
Cell[70696, 1488, 1262, 21, 30, "Input",ExpressionUUID->"a4ff2a4b-6c90-45dd-85eb-63b7ea5b9faa"],
Cell[71961, 1511, 367, 9, 30, "Input",ExpressionUUID->"35c4d328-9508-4e29-8d97-804851a8df67"],
Cell[72331, 1522, 1161, 18, 220, "Input",ExpressionUUID->"85ad8901-1248-4fae-b163-df4f7d83cd54"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73529, 1545, 303, 5, 67, "Section",ExpressionUUID->"170a0f62-6443-4688-900d-d4101b8f13d9"],
Cell[73835, 1552, 191, 3, 35, "Text",ExpressionUUID->"7ef6d8e8-407f-4311-8b2f-62e85b0bbe7b"],
Cell[74029, 1557, 509, 12, 30, "Input",ExpressionUUID->"fe55f67c-fdda-4451-a2c6-768e2f58f948"],
Cell[74541, 1571, 1567, 24, 724, "Input",ExpressionUUID->"f9c28a13-0ef0-4a55-9ada-63342c960894"],
Cell[76111, 1597, 181, 3, 35, "Text",ExpressionUUID->"3cb65b29-740b-4356-9649-0be94968a499"],
Cell[76295, 1602, 1339, 31, 115, "Input",ExpressionUUID->"f8495faf-bf88-43d0-9df9-ba4daec56d71"],
Cell[77637, 1635, 4301, 58, 1249, "Input",ExpressionUUID->"7af76fb8-38d5-4fef-8729-4c69c9d072af"]
}, Open  ]]
}, Open  ]]
}
]
*)

